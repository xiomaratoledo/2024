Yes, that's correct! In Java, an interface is indeed a 100% abstract version of an abstract class. 

An abstract class can have both abstract methods (methods without a body) and concrete methods (methods with implementations), along with instance variables, constructors, etc. 

On the other hand, an interface can only have method declarations (signatures) without implementations, along with constants, default methods (methods with a default implementation), static methods, and nested types. 

So, while an abstract class can have a mixture of abstract and concrete members, an interface is purely abstract, containing only method signatures without any method implementations. 

This makes interfaces a powerful tool for achieving abstraction and defining contracts for classes to implement, while abstract classes provide a way to share common implementations among related classes.
